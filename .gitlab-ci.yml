stages:
  - build
  - package

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - echo "$BASE_URL"
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
       if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/staging/cross-cloud.yml"
       elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/integration/cross-cloud.yml"
       else
          export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/master/cross-cloud.yml"
       fi
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - echo "$CROSS_CLOUD_YML"
  - >
    if ruby -v ; then
        echo 'Ruby found, not using rvm'
        cp -a /opt/local/dashboard /dashboard 
        pushd /dashboard
        source /opt/local/.env
        bundle install
        ./bin/update_dashboard
        popd
    else
       source /opt/local/etc/rvmrc
       source /opt/local/etc/profile.d/rvm.sh
       cp -a /opt/local/dashboard /dashboard
       pushd /dashboard
       source /opt/local/.env
       ./bin/update_dashboard
       popd
    fi

compile:
  stage: build
  image: crosscloudci/onap-ciservice
  script:
    - echo 'skipped'

container:
  stage: package
  image: crosscloudci/onap-ciservice:onap2
  script:
    - mkdir ~/.docker && echo "$DOCKER" > ~/.docker/config.json
    - IMAGE_TAG=${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHA_SHORT}.${CI_JOB_ID}
    - INTEGRATION_NAME="onap"
    - pwd
    - >
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        export INTEGRATION_RELEASE_TYPE="head"
      else
        export INTEGRATION_RELEASE_TYPE="stable"
      fi
    - cd /onapciservice
    - bundle install
    - cd -
    - /onapciservice/build_pipeline build_status --integration=$INTEGRATION_NAME --release-type=$INTEGRATION_RELEASE_TYPE so
    - /onapciservice/build_pipeline download_container --integration=$INTEGRATION_NAME --release-type=$INTEGRATION_RELEASE_TYPE so
    - /onapciservice/build_pipeline create_pinnings --integration=$INTEGRATION_NAME --release-type=$INTEGRATION_RELEASE_TYPE so | tee -a release.env
    - cat release.env
    - cd ..
    - ls -la
    - pwd
    - cd ..
    - ls -la
    - pwd
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - ./bin/release.env
